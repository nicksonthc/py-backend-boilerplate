name: Python Application Test

on:
  push:
    branches: [ "release", "test" ]
  pull_request:
    branches-ignore: [ "main", "master" ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: py-backend-test
        ports:
          - "5432:5432"
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # === SETUP PHASE ===
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Wait for PostgreSQL
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          # PostgreSQL health check handles this, but adding a small delay for safety
          sleep 2

      - name: Create .env.test
        run: |
          echo "ENV=test" >> .env.test
          echo "SECRET_KEY=test_secret_key_for_unittest_only" >> .env.test
          echo "API_HOST=127.0.0.1" >> .env.test
          echo "API_PORT=3100" >> .env.test
          echo "TCP_HOST=127.0.0.1" >> .env.test
          echo "TCP_PORT=2525" >> .env.test
          echo "POSTGRES_HOST=localhost" >> .env.test
          echo "POSTGRES_PORT=5432" >> .env.test
          echo "POSTGRES_USER=test_user" >> .env.test
          echo "POSTGRES_PASSWORD=test_password" >> .env.test
          echo "POSTGRES_DB=py-backend-test" >> .env.test
          echo "TIME_ZONE=Asia/Kuala_Lumpur" >> .env.test

      # === DEPENDENCIES PHASE ===
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev gcc

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # === DATABASE SETUP PHASE ===
      - name: Verify .env.test exists
        run: |
          echo "Verifying .env.test file exists..."
          ls -la .env.test
          echo "Contents of .env.test:"
          cat .env.test

      - name: Set up database
        run: |
          # Copy test environment
          cp .env.test .env
          
          # Initialize database tables
          python -c "
          import asyncio
          from app.db.init_db import init_db
          asyncio.run(init_db())
          "
          
          # Run migrations
          python -m alembic upgrade head

      # === TEST PHASE ===
      - name: Run tests
        run: |
          python -m pytest -v
